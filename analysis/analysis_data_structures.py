import numpy
from MozaikLite.stimuli.stimulus_generator import parse_stimuls_id

class AnalysisDataStructure(object):
      """
      AnalysisDataStructure encupsulates data that a certain Analysis class generates
      A Analysis class can generate several AnalysisDataStructure's and one AnalysisDataStructure
      can be generated by several Analysis classes
      the goal is to offer a common interface of such data for plotting 
      i.e. many analysis can generate 2D tuning curves of severa kinds but they all
      share common data structure and can be plotted in a common way
      
      An important parameter of each AnalysisDataStructure is identifier which is used to 
      identify data structures of common type in storage facilities
      Currently differnt datastructures with common interface should share the identifiers
      but it is not clearly this is needed. If it turns out such sharing is not neccessary it 
      might be abolised and there will be one-to-one mapping between AnalysisDataStructure classes
      and identifiers
      """
      
      identifier = None


class TuningCurve(object):
        """
             Tuning curve holds data of a tuning curves with respect to a certain paramter of a stimulus
             It is assumed that all other paramters are either: 
              * collpased (i.e. they have been averaged out such as phase or trials in case of orientation tuning)
              * those that are unclopased should be tread as the paramters of 
                the tuning curve (i.e. orientation tuning curves taken at different contrasts
            
             sheet_name - in which sheet the data were recorded
             values     - is a list of lists, members of the outter list correspond 
                          to the value of the tuning curve for a stimulus at the same position in the stimuli_ids
                          the inner lists contain the actual values for the measured neurons
             stimuli_ids - see values description
             parameter_index - the parameter position in the stimulus id agains which the tuning curve was computed
        """
        
        identifier = 'TuningCurve'
        
        def __init__(self,values,stimuli_ids,parameter_index,sheet_name):
            self.sheet_name = sheet_name    
            self.values = values
            self.stimuli_ids = stimuli_ids
            self.parameter_index = parameter_index

        def to_dictonary_of_tc_parametrization(self):
            # creat dictionary where stimulus_id indexes all the different 
            # values and corresponding data for the given 
            # neurons throught the range of the paramter against which the tuning curve was computed
            # this groups the data according to the the individual tuning curves to be plotted, each
            # corresponding to different parametrization (ie. contrast for orientation tuning)

            self.d = {}
            for (v,s) in zip(self.values,self.stimuli_ids):
                s = parse_stimuls_id(s)
                val = s.parameters[self.parameter_index]
                s.parameters[self.parameter_index]='x'
                
                if self.d.has_key(str(s)):
                   (a,b) = self.d[str(s)] 
                   a.append(v)
                   b.append(val)
                else:
                   self.d[str(s)]  = ([v],[val]) 
            
            for k in self.d:
                (a,b) = self.d[k]
                self.d[k] = (numpy.array(a),b)
            
            return self.d


class NeurotoolsData(object):
      """
      Turn the recordings into Neurotools data structures that can than be visualized 
      via numerous Neurotools analysis tools
      """
      
      identifier = 'NeurotoolsData'
      
      def __init__(self,spike_data_dict,vm_data_dict,g_syn_e_data_dict,g_syn_i_data_dict):
          self.vm_data_dict = vm_data_dict
          self.g_syn_e_data_dict = g_syn_e_data_dict
          self.g_syn_i_data_dict = g_syn_i_data_dict
          self.spike_data_dict = spike_data_dict
